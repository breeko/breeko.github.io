<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lisp on ML-Everything</title>
    <link>https://breeko.github.io/tags/lisp/</link>
    <description>Recent content in lisp on ML-Everything</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://breeko.github.io/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lisp, Floating Points and Muller&#39;s Recurrence</title>
      <link>https://breeko.github.io/blog/2018-07-30_lisp-floating-points-and-muller-s-recurrence/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://breeko.github.io/blog/2018-07-30_lisp-floating-points-and-muller-s-recurrence/</guid>
      <description>Floating point number representations are annoying to work with. Lisp and by extension Clojure deal with them by using fractions instead.
Floating point representations can lead to some strange results. Lisp and Clojure have fraction representations built in, helping avoid many of the problems with floats.
I came across this article about why the IRS has had trouble to break away from Cobol. The article argues that a big reason is due to Cobolâ€™s native support of fixed point as opposed to floating point.</description>
    </item>
    
  </channel>
</rss>